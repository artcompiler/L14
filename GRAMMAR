LEXICAL SYNTAX

InputElementDiv 
    WhiteSpace
    LineTerminator
    Comment
    Token
    DivPunctuator

InputElementRegExp 
    WhiteSpace
    LineTerminator
    Comment
    Token
    RegularExpressionLiteral

WhiteSpace 
    <TAB>
    <VT>
    <FF>
    <SP>
    <NBSP>
    <BOM>
    <USP>

LineTerminator 
    <LF>
    <CR>
    <LS>
    <PS>

LineTerminatorSequence 
    <LF>
    <CR> [lookahead not <LF> ]
    <LS>
    <PS>
    <CR> <LF>

Comment
    MultiLineComment
    SingleLineComment

MultiLineComment
    /* MultiLineCommentCharsOpt */

MultiLineCommentChars 
    MultiLineNotAsteriskChar MultiLineCommentCharsOpt
    * PostAsteriskCommentCharsOpt

PostAsteriskCommentChars
    MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentCharsOpt
    * PostAsteriskCommentCharsOpt

MultiLineNotAsteriskChar 
    SourceCharacter [but not *]

MultiLineNotForwardSlashOrAsteriskChar 
    SourceCharacter [but not one of / or *]

SingleLineComment 
    // SingleLineCommentCharsOpt

SingleLineCommentChars 
    SingleLineCommentChar SingleLineCommentCharsOpt

SingleLineCommentChar 
    SourceCharacter [but not LineTerminator]

Token 
    IdentifierName
    Punctuator
    NumericLiteral
    StringLiteral

Identifier 
    IdentifierName [but not ReservedWord]

IdentifierName 
    IdentifierStart
    IdentifierName IdentifierPart

IdentifierStart 
    UnicodeLetter
    $
    _
    \ UnicodeEscapeSequence

UnicodeCombiningMark 
    [any character in the Unicode categories “Non-spacing mark (Mn)” 
     or “Combining spacing mark (Mc)”]

UnicodeDigit 
    [any character in the Unicode category “Decimal number (Nd)”]

UnicodeConnectorPunctuation 
    [any character in the Unicode category “Connector punctuation (Pc)”]

ReservedWord 
    Keyword
    FutureReservedWord
    NullLiteral
    BooleanLiteral

Keyword [one of]
    break
    delete
    import
    this
    case
    do
    in
    throw
    catch
    else
    instanceof
    try
    class
    export
    let
    typeof
    continue
    finally
    new
    var
    const
    for
    return
    void
    debugger
    function
    super
    while
    default
    if
    switch
    with

FutureReservedWord [one of]
    enum
    extends

Punctuator [one of]
    {
    }
    (
    )
    [
    ]
    .
    ;
    ,
    <
    >
    <=
    >=
    ==
    !=
    ===
    !==
    +
    -
    *
    %
    ++
    --
    <<
    >>
    >>>
    &
    |
    ^
    !
    ~
    &&
    ||
    ?
    :
    =
    +=
    -=
    *=
    %=
    <<=
    >>=
    >>>=
    &=
    |=
    ^=
    <|

DivPunctuator [one of]
    /
    /=

NumericLiteral 
    DecimalLiteral
    BinaryIntegerLiteral
    OctalIntegerLiteral
    HexIntegerLiteral

DecimalLiteral 
    DecimalIntegerLiteral . DecimalDigitsOpt ExponentPartOpt
    . DecimalDigits ExponentPartOpt
    DecimalIntegerLiteral ExponentPartOpt

DecimalIntegerLiteral 
    0
    NonZeroDigit DecimalDigitsOpt

DecimalDigits 
    DecimalDigit
    DecimalDigits DecimalDigit

DecimalDigit [one of]
    0 1 2 3 4 5 6 7 8 9

NonZeroDigit [one of]
    1 2 3 4 5 6 7 8 9

ExponentPart 
    ExponentIndicator SignedInteger

ExponentIndicator [one of]
    e E

SignedInteger 
    DecimalDigits + DecimalDigits - DecimalDigits

BinaryIntegerLiteral 
    0b BinaryDigit
    0B BinaryDigit
    BinaryIntegerLiteral BinaryDigit

BinaryDigit [one of]
    0 1

OctalIntegerLiteral 
    0o OctalDigit 0O OctalDigit OctalIntegerLiteral OctalDigit

OctalDigit [one of]
    0 1 2 3 4 5 6 7

HexIntegerLiteral 
    0x HexDigit 0X HexDigit HexIntegerLiteral HexDigit

HexDigit [one of]
    0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F

StringLiteral 
    " DoubleStringCharactersOpt "
    ' SingleStringCharactersOpt '

DoubleStringCharacters 
    DoubleStringCharacter DoubleStringCharactersOpt

SingleStringCharacters 
    SingleStringCharacter SingleStringCharactersOpt

DoubleStringCharacter 
    SourceCharacter [but not one of " or \ or LineTerminator \ EscapeSequence LineContinuation]

SingleStringCharacter 
    SourceCharacter [but not one of ' or \ or LineTerminator \ EscapeSequence LineContinuation]

LineContinuation 
    \ LineTerminatorSequence

EscapeSequence 
    CharacterEscapeSequence 0 [lookahead  DecimalDigit] HexEscapeSequence UnicodeEscapeSequence

CharacterEscapeSequence 
    SingleEscapeCharacter
    NonEscapeCharacter

SingleEscapeCharacter [one of]
    ' " \ b f n r t v

NonEscapeCharacter 
    SourceCharacter [but not one of EscapeCharacter or LineTerminator]

EscapeCharacter 
    SingleEscapeCharacter DecimalDigit x u

HexEscapeSequence 
    x HexDigit HexDigit

UnicodeEscapeSequence 
    u HexDigit HexDigit HexDigit HexDigit

RegularExpressionLiteral 
    / RegularExpressionBody / RegularExpressionFlags

RegularExpressionBody 
    RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars 
    [empty]
    RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar 
    RegularExpressionNonTerminator [but not one of * or \ or / or []
    RegularExpressionBackslashSequence RegularExpressionClass

RegularExpressionChar 
    RegularExpressionNonTerminator [but not one of \ or / or []
    RegularExpressionBackslashSequence
    RegularExpressionClass

RegularExpressionBackslashSequence 
    \ RegularExpressionNonTerminator

RegularExpressionNonTerminator 
    SourceCharacter but not LineTerminator

RegularExpressionClass 
    [ RegularExpressionClassChars ]

RegularExpressionClassChars 
    [empty]
    RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar 
    RegularExpressionNonTerminator [but not one of ] or \]
    RegularExpressionBackslashSequence

RegularExpressionFlags 
    [empty]
    RegularExpressionFlags IdentifierPart

EXPRESSIONS

PrimaryExpression 
    this
    Identifier
    Literal
    ArrayLiteral
    ObjectLiteral
    FunctionExpression
    ClassExpression
    GeneratorExpression
    GeneratorComprehension
    ( Expression )

Literal 
    NullLiteral
    ValueLiteral

ValueLiteral 
    BooleanLiteral
    NumericLiteral
    StringLiteral
    RegularExpressionLiteral

ArrayInitialiser 
    ArrayLiteral
    ArrayComprehension

ArrayLiteral 
    [ ElisionOpt ]
    [ ElementList ]
    [ ElementList , ElisionOpt ]

ElementList 
    ElisionOpt AssignmentExpression
    ElisionOpt … AssignmentExpression
    ElementList , ElisionOpt AssignmentExpression
    ElementList , ElisionOpt SpreadElement

Elision 
    ,
    Elision ,

SpreadElement 
    … AssignmentExpression

ArrayComprehension 
    [ AssignmentExpression ComprehensionForList ]
    [ AssignmentExpression ComprehensionForList if Expression ]

ComprehensionForList 
    ComprehensionFor
    ComprehensionForList ComprehensionFor

ComprehensionFor 
    for ForBinding of Expression

ForBinding 
    BindingIdentifier
    BindingPattern

ObjectLiteral 
    { }
    { PropertyDefinitionList }
    { PropertyDefinitionList , }

PropertyDefinitionList 
    PropertyDefinition
    PropertyDefinitionList , PropertyDefinition

PropertyDefinition 
    IdentifierName
    PropertyName  AssignmentExpression
    MethodDefinition

PropertyName 
    IdentifierName
    StringLiteral
    NumericLiteral

GeneratorComprehension 
    ( Expression ComprehensionForList )
    ( Expression ComprehensionForList if Expression )

MemberExpression 
    PrimaryExpression
    MemberExpression [ Expression ]
    MemberExpression . IdentifierName
    super [ Expression ]
    super . IdentifierName
    new MemberExpression Arguments

NewExpression 
    MemberExpression
    new NewExpression

CallExpression 
    MemberExpression Arguments
    super Arguments
    CallExpression Arguments
    CallExpression [ Expression ]
    CallExpression . IdentifierName

Arguments 
    ( )
    ( ArgumentList )

ArgumentList 
    AssignmentExpression
    ... AssignmentExpression
    ArgumentList , AssignmentExpression
    ArgumentList , ... AssignmentExpression

LeftHandSideExpression 
    NewExpression
    CallExpression

PostfixExpression 
    LeftHandSideExpression
    LeftHandSideExpression [no LineTerminator here] ++
    LeftHandSideExpression [no LineTerminator here] --

UnaryExpression 
    PostfixExpression
    delete UnaryExpression
    void UnaryExpression
    typeof UnaryExpression
    ++ UnaryExpression
    -- UnaryExpression
    + UnaryExpression
    - UnaryExpression
    ~ UnaryExpression
    ! UnaryExpression

MultiplicativeExpression 
    UnaryExpression
    MultiplicativeExpression * UnaryExpression
    MultiplicativeExpression / UnaryExpression
    MultiplicativeExpression % UnaryExpression

AdditiveExpression 
    MultiplicativeExpression
    AdditiveExpression + MultiplicativeExpression
    AdditiveExpression - MultiplicativeExpression

ShiftExpression 
    AdditiveExpression
    ShiftExpression << AdditiveExpression
    ShiftExpression >> AdditiveExpression
    ShiftExpression >>> AdditiveExpression

RelationalExpression 
    ShiftExpression
    RelationalExpression < ShiftExpression
    RelationalExpression > ShiftExpression
    RelationalExpression <= ShiftExpression
    RelationalExpression >= ShiftExpression
    RelationalExpression instanceof ShiftExpression
    RelationalExpression in ShiftExpression

RelationalExpressionNoIn 
    ShiftExpression
    RelationalExpressionNoIn < ShiftExpression
    RelationalExpressionNoIn > ShiftExpression
    RelationalExpressionNoIn <= ShiftExpression
    RelationalExpressionNoIn >= ShiftExpression
    RelationalExpressionNoIn instanceof ShiftExpression

EqualityExpression 
    RelationalExpression
    EqualityExpression == RelationalExpression
    EqualityExpression != RelationalExpression
    EqualityExpression === RelationalExpression
    EqualityExpression !== RelationalExpression
    EqualityExpression [no LineTerminator here] is RelationalExpression
    EqualityExpression [no LineTerminator here] isnt RelationalExpression

EqualityExpressionNoIn 
    RelationalExpressionNoIn
    EqualityExpressionNoIn == RelationalExpressionNoIn
    EqualityExpressionNoIn != RelationalExpressionNoIn
    EqualityExpressionNoIn === RelationalExpressionNoIn
    EqualityExpressionNoIn !== RelationalExpressionNoIn
    EqualityExpression [no LineTerminator here] is RelationalExpression
    EqualityExpression [no LineTerminator here] isnt RelationalExpression

BitwiseANDExpression 
    EqualityExpression
    BitwiseANDExpression & EqualityExpression

BitwiseANDExpressionNoIn 
    EqualityExpressionNoIn
    BitwiseANDExpressionNoIn & EqualityExpressionNoIn

BitwiseXORExpression 
    BitwiseANDExpression
    BitwiseXORExpression ^ BitwiseANDExpression

BitwiseXORExpressionNoIn 
    BitwiseANDExpressionNoIn
    BitwiseXORExpressionNoIn ^ BitwiseANDExpressionNoIn

BitwiseORExpression 
    BitwiseXORExpression
    BitwiseORExpression | BitwiseXORExpression

BitwiseORExpressionNoIn 
    BitwiseXORExpressionNoIn
    BitwiseORExpressionNoIn | BitwiseXORExpressionNoIn

LogicalANDExpression 
    BitwiseORExpression
    LogicalANDExpression && BitwiseORExpression

LogicalANDExpressionNoIn 
    BitwiseORExpressionNoIn
    LogicalANDExpressionNoIn && BitwiseORExpressionNoIn

LogicalORExpression 
    LogicalANDExpression
    LogicalORExpression || LogicalANDExpression

LogicalORExpressionNoIn 
    LogicalANDExpressionNoIn
    LogicalORExpressionNoIn || LogicalANDExpressionNoIn

ConditionalExpression 
    LogicalORExpression
    LogicalORExpression ? AssignmentExpression : AssignmentExpression

ConditionalExpressionNoIn
    LogicalORExpressionNoIn
    LogicalORExpressionNoIn ? AssignmentExpression : AssignmentExpressionNoIn

AssignmentExpression 
    ConditionalExpression
    YieldExpression
    ArrowFunction
    LeftHandSideExpression = AssignmentExpression
    LeftHandSideExpression AssignmentOperator AssignmentExpression

AssignmentExpressionNoIn 
    ConditionalExpressionNoIn
    YieldExpression
    ArrowFunction
    LeftHandSideExpression = AssignmentExpressionNoIn
    LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn

AssignmentOperator [one of]
    *=
    /=
    %=
    +=
    -=
    <<=
    >>=
    >>>=
    &=
    ^=
    |=

AssignmentPattern 
    ObjectAssignmentPattern ArrayAssignmentPattern

ObjectAssignmentPattern 
    { }
    { AssignmentPropertyList }
    { AssignmentPropertyList , }

ArrayAssignmentPattern 
    [ ElisionOpt AssignmentRestElementOpt ]
    [ AssignmentElementList ]
    [ AssignmentElementList , ElisionOpt AssignmentRestElementOpt ]

AssignmentPropertyList 
    AssignmentProperty
    AssignmentPropertyList , AssignmentProperty

AssignmentElementList 
    ElisionOpt AssignmentElement
    AssignmentElementList , ElisionOpt AssignmentElement

AssignmentProperty 
    Identifier InitialiserOpt
    PropertyName  AssignmentElement

AssignmentElement 
    LeftHandSideExpression InitialiserOpt

AssignmentRestElement 
    … LeftHandSideExpression

Expression 
    AssignmentExpression
    Expression , AssignmentExpression

ExpressionNoIn 
    AssignmentExpressionNoIn
    ExpressionNoIn , AssignmentExpressionNoIn

STATEMENTS AND DECARATIONS

Statement 
    BlockStatement
    VariableStatement
    EmptyStatement
    ExpressionStatement
    IfStatement
    BreakableStatement
    ContinueStatement
    BreakStatement
    ReturnStatement
    WithStatement
    LabelledStatement
    ThrowStatement
    TryStatement
    DebuggerStatement

Declaration 
    FunctionDeclaration
    GeneratorDeclaration
    ClassDeclaration
    LexicalDeclaration

BreakableStatement 
    IterationStatement
    SwitchStatement

BlockStatement 
    Block

Block 
    { StatementListOpt }

StatementList 
    StatementListItem
    StatementList StatementListItem

StatementListItem 
    Statement Declaration

LexicalDeclaration 
    LetOrConst BindingList ;

LexicalDeclarationNoIn 
    LetOrConst BindingListNoIn

LetOrConst 
    let const

BindingList 
    LexicalBinding BindingList , LexicalBinding

BindingListNoIn 
    LexicalBindingNoIn BindingListNoIn , LexicalBindingNoIn

LexicalBinding 
    BindingIdentifier InitialiserOpt BindingPattern Initialiser

LexicalBindingNoIn 
    BindingIdentifier InitialiserNoInOpt BindingPattern InitialiserNoIn

BindingIdentifier 
    Identifier

Initialiser 
    = AssignmentExpression

InitialiserNoIn 
    = AssignmentExpressionNoIn

VariableStatement 
    var VariableDeclarationList ;

VariableDeclarationList 
    VariableDeclaration
    VariableDeclarationList , VariableDeclaration

VariableDeclarationListNoIn 
    VariableDeclarationNoIn
    VariableDeclarationListNoIn , VariableDeclarationNoIn

VariableDeclaration 
    BindingIdentifier InitialiserOpt
    BindingPattern Initialiser

VariableDeclarationNoIn 
    BindingIdentifier InitialiserNoInOpt
    BindingPattern InitialiserNoIn

BindingPattern 
    ObjectBindingPattern
    ArrayBindingPattern

ObjectBindingPattern 
    { }
    { BindingPropertyList }
    { BindingPropertyList , }

ArrayBindingPattern 
    [ ElisionOpt BindingRestElementOpt ]
    [ BindingElementList ]
    [ BindingElementList , ElisionOpt BindingRestElementOpt ]

BindingPropertyList 
    BindingProperty
    BindingPropertyList , BindingProperty

BindingElementList 
    ElisionOpt BindingElement
    BindingElementList , ElisionOpt BindingElement

BindingProperty 
    SingleNameBinding
    PropertyName : BindingElement

BindingElement 
    SingleNameBinding
    BindingPattern InitialiserOpt

SingleNameBinding 
    BindingIdentifier InitialiserOpt

BindingRestElement 
    … BindingIdentifier

EmptyStatement 
    ;

ExpressionStatement 
    [lookahead not { {, function, class }] Expression ;

IfStatement 
    if ( Expression ) Statement else Statement
    if ( Expression ) Statement

IterationStatement 
    do Statement while ( Expression )
    while ( Expression ) Statement
    for (ExpressionNoInOpt; ExpressionOpt ; ExpressionOpt ) Statement
    for ( var VariableDeclarationListNoIn; ExpressionOpt ; ExpressionOpt ) Statement
    for ( LexicalDeclarationNoIn; ExpressionOpt ; ExpressionOpt ) Statement
    for ( LeftHandSideExpression in Expression ) Statement
    for ( var ForBinding in Expression ) Statement
    for ( ForDeclaration in Expression ) Statement
    for ( LeftHandSideExpression of Expression ) Statement
    for ( var ForBinding of Expression ) Statement
    for ( ForDeclaration of Expression ) Statement

ForDeclaration 
    LetOrConst ForBinding

ContinueStatement 
    continue ;
    continue [no LineTerminator here] Identifier ;

BreakStatement 
    break ;
    break [no LineTerminator here] Identifier ;

ReturnStatement 
    return ;
    return [no LineTerminator here] Expression ;

WithStatement 
    with ( Expression ) Statement

SwitchStatement 
    switch ( Expression ) CaseBlock

CaseBlock 
    { CaseClausesOpt }
    { CaseClausesOpt DefaultClause CaseClausesOpt }

CaseClauses 
    CaseClause
    CaseClauses CaseClause

CaseClause 
    case Expression : StatementListOpt

DefaultClause 
    default : StatementListOpt

LabelledStatement 
    Identifier : Statement

ThrowStatement 
    throw [no LineTerminator here] Expression ;

TryStatement 
    try Block Catch
    try Block Finally
    try Block Catch Finally

Catch 
    catch ( CatchParameter ) Block

Finally 
    finally Block

CatchParameter 
    BindingIdentifier BindingPattern

DebuggerStatement 
    debugger ;

FunctionDeclaration :
    function BindingIdentifier ( FormalParameterList ) { FunctionBody }

FunctionExpression :
    function BindingIdentifieropt ( FormalParameterList ) { FunctionBody }

FormalParameterList :
    [empty]
    FunctionRestParameter
    FormalsList
    FormalsList, FunctionRestParameter

FormalsList :
    FormalParameter
    FormalsList , FormalParameter

FunctionRestParameter :
    ... BindingIdentifier

FormalParameter :
    BindingElement

FunctionBody :
    StatementListopt

ArrowFunction :
    ArrowParameters => ConciseBody

ArrowParameters :
    BindingIdentifer
    ( ArrowFormalParameterList )

ArrowFormalParameterList :
    [empty]
    FunctionRestParameter
    CoverFormalsList
    CoverFormalsList , FunctionRestParameter

ConciseBody :
    [lookahead not { { }] AssignmentExpression { FunctionBody }

CoverFormalsList :
    Expression

ArrowFormalParameterList :
    FormalParameterList

MethodDefinition :
    PropertyName ( FormalParameterList ) { FunctionBody }
    * PropertyName ( FormalParameterList ) { FunctionBody }
    get PropertyName ( ) { FunctionBody }
    set PropertyName ( PropertySetParameterList ) { FunctionBody }

PropertySetParameterList :
    BindingIdentifier
    BindingPattern

GeneratorDeclaration :
    function * BindingIdentifier ( FormalParameterList ) { FunctionBody }

GeneratorExpression :
    function * BindingIdentifieropt ( FormalParameterList ) { FunctionBody }

YieldExpression :
    yield YieldDelegatoropt AssignmentExpression

YieldDelegator :
    *

ClassDeclaration:
    class BindingIdentifier ClassTail

ClassExpression :
    class BindingIdentifieropt ClassTail

ClassTail :
    ClassHeritageopt { ClassBodyopt }

ClassHeritage:
    extends AssignmentExpression

ClassBody :
    ClassElementList

ClassElementList :
    ClassElement ClassElementList ClassElement

ClassElement :
    MethodDefinition ;

PROGRAMS

Program :
    ProgramBodyopt

ProgramBody :
    StatementList

